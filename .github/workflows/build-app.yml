name: Build Apps
on:
  push:
    branches:
      - '*'
    tags:
      - 'v*'   # Runs when you push a version tag

  workflow_dispatch:
jobs:
  Build-Windows-x64:
    runs-on: windows-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Install Node
        uses: actions/setup-node@v4
      - name: Install dependencies
        run: npm install
      - name: Build
        run: npm run package
      - name: Zip the directory
        run: |
          Compress-Archive -Path Strypify-win32-x64 -DestinationPath Strypify-win32-x64.zip
        shell: powershell
      - name: Archive Windows build
        uses: actions/upload-artifact@v4
        with:
          name: Strypify-windows-x64
          path: |
            Strypify-win32-x64.zip

  Build-Mac-App-Aarch:
    runs-on: macos-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Install Node
        uses: actions/setup-node@v4
      #- name: Install the Apple certificate and provisioning profile
      #  env:
      #    BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
      #    KEYCHAIN_PASSWORD: Vh4o2zhsnBE5f
      #  run: |
      #    # From https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
      #    # create variables
      #    CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
      #    KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
      #
      #    # import certificate and provisioning profile from secrets
      #    echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
      #
      #    # create temporary keychain
      #    security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      #    security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
      #    security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      #
      #    # import certificate to keychain
      #    security import $CERTIFICATE_PATH -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
      #    security list-keychain -d user -s $KEYCHAIN_PATH
      - name: Install dependencies
        run: npm install
      - name: Build
        run: npm run package
      #- name: Sign
      #  run: |
      #    npm run sign -- --identity="Developer ID Application: ${{ secrets.DEVELOPER_NAME }}"
      #- name: Notarize
      #  run: |
      #    /usr/bin/ditto -c -k --keepParent Strypify-darwin-arm64/Strypify.app notarize.zip
      #    xcrun notarytool submit --apple-id ${{ secrets.APPLEID_EMAIL }} --password ${{ secrets.APPLEID_PASSWORD }} --team-id ${{ secrets.APPLEID_TEAMID }} --wait notarize.zip
      #    ditto -x -k notarize.zip .
      #    xcrun stapler staple Strypify.app
      #    /usr/bin/ditto -c -k --keepParent Strypify.app Strypify.zip
      - name: Zip
        run: |
          /usr/bin/ditto -c -k --keepParent Strypify-darwin-arm64/Strypify.app Strypify.zip
      - name: Archive Mac build
        uses: actions/upload-artifact@v4
        with:
          name: Strypify-mac-aarch
          path: |
            Strypify.zip

  Build-Ubuntu-x64:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Install Node
        uses: actions/setup-node@v4
      - name: Install dependencies
        run: npm install
      - name: Build
        run: npm run package
      - name: Zip the directory
        run: |
          zip -r Strypify-linux-x64.zip Strypify-linux-x64
      - name: Archive Linux build
        uses: actions/upload-artifact@v4
        with:
          name: Strypify-linux-x64
          path: |
            Strypify-linux-x64.zip
      - name: Archive Asciidoctor plugin
        uses: actions/upload-artifact@v4
        with:
          name: strypify-plugin.rb
          path: |
            asciidoctor/strypify-plugin.rb            

  Test:
    runs-on: ubuntu-latest
    needs: Build-Ubuntu-x64
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download Strypify artifact
      uses: actions/download-artifact@v4
      with:
        name: Strypify-linux-x64
        path: ./artifact

    - name: Unzip Strypify
      run: unzip artifact/Strypify-linux-x64.zip -d ./artifact

    - name: Ensure Strypify is executable
      run: chmod +x ./artifact/Strypify-linux-x64/Strypify

    - name: Install Xvfb and Python
      run: |
        sudo apt install xvfb
        python3 -m pip install --upgrade pip
        pip install Pillow

    - name: Run Strypify and check image
      shell: bash
      run: |
        for PYFILE in example*.py; do
          FILE=`xvfb-run ./artifact/Strypify-linux-x64/Strypify --file $PYFILE --no-sandbox --disable-setuid-sandbox`
          EXPECTEDFILE="expected-${PYFILE%.py}.png"
          if [ ! -f $FILE ]; then
            echo "Image $FILE does not exist!"
            exit 1
          fi
          python3 - <<'EOF'
          from PIL import Image, ImageChops
          import math, operator, os
          
          def rmsdiff(im1, im2):
              "Calculate the root-mean-square difference between two images"
              h = ImageChops.difference(im1, im2).histogram()
              sq = (value*((idx%256)**2) for idx, value in enumerate(h))
              sum_of_squares = sum(sq)
              rms = math.sqrt(sum_of_squares / (im1.size[0] * im1.size[1]))
              return rms
          
          im1 = Image.open(os.environ('FILE')).convert("RGB")
          im2 = Image.open(os.environ('EXPECTEDFILE')).convert("RGB")
          
          tolerance = 10  # Adjust RMS tolerance
          diff = rmsdiff(im1, im2)
          print(f"RMS difference: {diff}")
          if diff > tolerance:
              raise Exception(f"Image is too different from expected (tolerance {tolerance})")
          EOF
        done

  Release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')   # only run for version tags
    needs:
      - Build-Windows-x64
      - Build-Ubuntu-x64
      - Build-Mac-App-Aarch
      - Test
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/*.zip
            artifacts/**/*.rb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
